{"version":3,"sources":["../src/query.types.ts"],"names":[],"mappings":"AAQA,MAAM,CAAN,IAAY,QAOX;AAPD,WAAY,QAAQ;IAChB,8BAAS,QAAe,YAAA,CAAA;IACxB,8BAAS,QAAe,YAAA,CAAA;IACxB,+BAAU,SAAgB,aAAA,CAAA;IAC1B,4BAAO,MAAa,UAAA,CAAA;IACpB,gCAAW,UAAiB,cAAA,CAAA;IAC5B,2BAAM,KAAY,SAAA,CAAA;AACtB,CAAC,EAPW,QAAQ,KAAR,QAAQ,QAOnB;AAYD,MAAM,CAAN,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,iCAAM,KAAY,SAAA,CAAA;IAClB,gCAAK,IAAW,QAAA,CAAA;AACpB,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;AAED,MAAM,CAAN,IAAY,WAcX;AAdD,WAAY,WAAW;IACnB,mCAAQ,IAAW,WAAA,CAAA;IACnB,sCAAW,IAAW,cAAA,CAAA;IACtB,kCAAO,IAAW,UAAA,CAAA;IAClB,yCAAc,IAAW,iBAAA,CAAA;IACzB,qCAAU,IAAW,aAAA,CAAA;IACrB,4CAAiB,IAAW,oBAAA,CAAA;IAC5B,uCAAY,IAAW,eAAA,CAAA;IACvB,0CAAe,IAAW,kBAAA,CAAA;IAC1B,qCAAU,IAAW,aAAA,CAAA;IACrB,wCAAa,IAAW,gBAAA,CAAA;IACxB,sCAAW,IAAW,cAAA,CAAA;IACtB,yCAAc,IAAW,iBAAA,CAAA;IACzB,qCAAU,IAAW,aAAA,CAAA;AACzB,CAAC,EAdW,WAAW,KAAX,WAAW,QActB;AAeD,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACjB,+BAAQ,OAAc,WAAA,CAAA;IACtB,kCAAW,UAAiB,cAAA,CAAA;AAChC,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB","file":"query.types.js","sourceRoot":"","sourcesContent":["export interface Field {\r\n    name: string;\r\n    label: string;\r\n    type: DataType;\r\n    custom: any;\r\n    valueInputTemplate: any;\r\n}\r\n\r\nexport enum DataType {\r\n    string = 'string' as any,\r\n    number = 'number' as any,\r\n    boolean = 'boolean' as any,\r\n    date = 'date' as any,\r\n    datetime = 'datetime' as any,\r\n    any = 'any' as any\r\n}\r\n\r\nexport interface FieldOpItem {\r\n    key: string;\r\n    label: string;\r\n}\r\n\r\nexport interface GroupOpItem {\r\n    key: GroupOpType;\r\n    label: string;\r\n}\r\n\r\nexport enum GroupOpType {\r\n    AND = 'and' as any,\r\n    OR = 'or' as any\r\n}\r\n\r\nexport enum FieldOpType {\r\n    Equal = 'eq' as any,\r\n    NotEqual = 'ne' as any,\r\n    Less = 'lt' as any,\r\n    LessOrEqual = 'le' as any,\r\n    Greater = 'gt' as any,\r\n    GreaterOrEqual = 'ge' as any,\r\n    BeginWith = 'bw' as any,\r\n    NotBeginWith = 'bn' as any,\r\n    EndWith = 'ew' as any,\r\n    NotEndWith = 'en' as any,\r\n    Contains = 'cn' as any,\r\n    NotContains = 'nc' as any,\r\n    Between = 'bt' as any\r\n}\r\n\r\nexport interface QueryGroup {\r\n    op: GroupOpType;\r\n    groups: QueryGroup[];\r\n    rules: Rule[];\r\n}\r\n\r\nexport interface Rule {\r\n    field: Field | string;\r\n    op: FieldOpItem | string;\r\n    data: any;\r\n    datas: any[];\r\n}\r\n\r\nexport enum QueryMode {\r\n    plain = 'plain' as any,\r\n    advanced = 'advanced' as any\r\n}"]}