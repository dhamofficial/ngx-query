{"version":3,"sources":["../../src/plain/plain.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAmB,KAAA,EAAc,MAAO,eAAA,CAAgB;AAGjE,OAAO,EAAE,eAAA,EAAiB,aAAA,EAAc,MAAO,uBAAA,CAAwB;AAGvE;IAAA;IA4EA,CAAC;IAzEC,sBAAI,yCAAa;aAKjB;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC7B,CAAC;aAPD,UAAkB,GAAe;YAC/B,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC;YAC1B,IAAI,CAAC,kBAAkB,GAAG,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACtD,CAAC;;;OAAA;IAUD,8BAAK,GAAL;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;IAC3C,CAAC;IAED,iCAAQ,GAAR;QACE,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAChD,CAAC;IAEO,iCAAQ,GAAhB,UAAiB,KAAiB;QAChC,IAAI,KAAK,GAAgB,EAAE,CAAC;QAC5B,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAClE,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC;QAED,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACrE,GAAG,CAAC,CAAgB,UAAY,EAAZ,KAAA,KAAK,CAAC,MAAM,EAAZ,cAAY,EAAZ,IAAY;gBAA3B,IAAM,KAAK,SAAA;gBACd,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;aAC5C;QACH,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAsCH,qBAAC;AAAD,CA5EA,AA4EC;;AArCM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,iBAAiB;gBAC3B,QAAQ,EAAE,4qCAyBT;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,6BAAc,GAA2C;IAChE,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;CAClC,CAAC","file":"plain.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, Input, Output } from '@angular/core';\r\n\r\nimport { Field, QueryGroup, Rule } from '../query.types';\r\nimport { cloneQueryGroup, generateQuery } from '../utils/query-helper';\r\n\r\n\r\nexport class PlainComponent {\r\n\r\n  \r\n  set queryTemplate(val: QueryGroup) {\r\n    this._queryTemplate = val;\r\n    this._tempQueryTemplate = cloneQueryGroup(this._queryTemplate);\r\n    this.rules = this.getRules(this._tempQueryTemplate);\r\n  }\r\n  get queryTemplate(): QueryGroup {\r\n    return this._queryTemplate;\r\n  }\r\n\r\n  rules: Rule[];\r\n\r\n  private _tempQueryTemplate: QueryGroup;\r\n  private _queryTemplate: QueryGroup;\r\n\r\n  reset(): void {\r\n    this.queryTemplate = this._queryTemplate;\r\n  }\r\n\r\n  getQuery(): QueryGroup {\r\n    return generateQuery(this._tempQueryTemplate);\r\n  }\r\n\r\n  private getRules(group: QueryGroup): Rule[] {\r\n    var rules: Array<Rule> = [];\r\n    if (group.rules && group.rules !== null && group.rules.length > 0) {\r\n      rules = rules.concat(group.rules);\r\n    }\r\n\r\n    if (group.groups && group.groups !== null && group.groups.length > 0) {\r\n      for (const child of group.groups) {\r\n        rules = rules.concat(this.getRules(child));\r\n      }\r\n    }\r\n\r\n    return rules;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ngx-query-plain',\r\n  template: `\r\n  <div class=\"row\">\r\n    <div class=\"form-horizontal\">\r\n      <div class=\"col-md-6\" *ngFor=\"let rule of rules\">\r\n        <div class=\"form-group\">\r\n          <label class=\"col-lg-3 control-label\">{{rule.field.label}}</label>\r\n          <div class=\"col-lg-9\">\r\n            <ng-container *ngIf=\"rule.op!='bt'\" [ngTemplateOutlet]=\"rule.field.valueInputTemplate\"\r\n              [ngOutletContext]=\"{rule:rule, dataIndex:0, custom: rule.field.custom}\"></ng-container>\r\n            <ul class=\"list-inline ngx-query-list-inline\" *ngIf=\"rule.op=='bt'\">\r\n                <li><ng-container [ngTemplateOutlet]=\"rule.field.valueInputTemplate\"\r\n                      [ngOutletContext]=\"{rule:rule, dataIndex:0, custom: rule.field.custom}\">\r\n                    </ng-container>\r\n                </li>\r\n                <li><span>-</span></li>\r\n                <li><ng-container [ngTemplateOutlet]=\"rule.field.valueInputTemplate\"\r\n                      [ngOutletContext]=\"{rule:rule, dataIndex:1, custom: rule.field.custom}\">\r\n                    </ng-container>\r\n                </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'queryTemplate': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}