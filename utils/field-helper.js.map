{"version":3,"sources":["../../src/utils/field-helper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAS,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAIjD;;;;;;GAMG;AACH,MAAM,6BAA6B,SAA2B;IAC5D,IAAM,MAAM,GAAU,EAAE,CAAC;IAEzB,GAAG,CAAC,CAAe,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS;QAAvB,IAAM,IAAI,kBAAA;QACb,IAAM,KAAK,GAAQ,EAAE,CAAC;QAEtB,IAAM,KAAK,GAAQ,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACpD,GAAG,CAAC,CAAe,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;YAAnB,IAAM,IAAI,cAAA;YACb,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1B;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC5B,KAAK,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QACrD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpB;IAED,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,0BAA0B,MAAe,EAAE,mBAAuD;IACtG,GAAG,CAAC,CAAgB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;QAArB,IAAM,KAAK,eAAA;QACd,cAAc,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;KAC5C;AACH,CAAC;AAED,MAAM,yBAAyB,KAAY,EAAE,mBAAuD;IAClG,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;QACpD,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC;IAC5B,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;QACtD,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;IAC3B,CAAC;IAED,EAAE,CAAC,CAAC,KAAK,CAAC,kBAAkB,KAAK,SAAS,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC;QAChF,IAAI,kBAAkB,GAAgC,mBAAmB,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,KAAK,KAAK,CAAC,IAAI,EAAzB,CAAyB,CAAC,CAAC;QAE/G,EAAE,CAAC,CAAC,kBAAkB,KAAK,SAAS,IAAI,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC;YACpE,MAAM,IAAI,KAAK,CAAC,yCAAuC,KAAK,CAAC,IAAI,OAAI,CAAC,CAAC;QACzE,CAAC;QAED,KAAK,CAAC,kBAAkB,GAAG,kBAAkB,CAAC,QAAQ,CAAC;IACzD,CAAC;AACH,CAAC","file":"field-helper.js","sourceRoot":"","sourcesContent":["import { Field, DataType } from '../query.types';\r\nimport { FieldDirective } from '../directives/field.directive';\r\nimport { ValueInputTemplateDirective } from '../directives/value-input-template.directive';\r\n\r\n/**\r\n * Translates templates definitions to objects\r\n *\r\n * @export\r\n * @param {FieldDirective[]} templates\r\n * @returns {any[]}\r\n */\r\nexport function translateTemplates(templates: FieldDirective[]): any[] {\r\n  const result: any[] = [];\r\n\r\n  for (const temp of templates) {\r\n    const field: any = {};\r\n\r\n    const props: any = Object.getOwnPropertyNames(temp);\r\n    for (const prop of props) {\r\n      field[prop] = temp[prop];\r\n    }\r\n\r\n    if (temp.valueInputTemplate) {\r\n      field.valueInputTemplate = temp.valueInputTemplate;\r\n    }\r\n\r\n    result.push(field);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function translateFields(fields: Field[], valueInputTemplates: Array<ValueInputTemplateDirective>): void {\r\n  for (const field of fields) {\r\n    translateField(field, valueInputTemplates);\r\n  }\r\n}\r\n\r\nexport function translateField(field: Field, valueInputTemplates: Array<ValueInputTemplateDirective>): void {\r\n  if (field.type === undefined || field.type === null) {\r\n    field.type = DataType.any;\r\n  }\r\n\r\n  if (field.label === undefined || field.label === null) {\r\n    field.label = field.name;\r\n  }\r\n\r\n  if (field.valueInputTemplate === undefined || field.valueInputTemplate === null) {\r\n    var valueInputTemplate: ValueInputTemplateDirective = valueInputTemplates.find(x => x.dataType === field.type);\r\n\r\n    if (valueInputTemplate === undefined || valueInputTemplate === null) {\r\n      throw new Error(`Can't fount out a template by type '${field.type}'.`);\r\n    }\r\n\r\n    field.valueInputTemplate = valueInputTemplate.template;\r\n  }\r\n}\r\n"]}