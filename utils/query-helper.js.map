{"version":3,"sources":["../../src/utils/query-helper.ts"],"names":[],"mappings":"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","file":"query-helper.js","sourceRoot":"","sourcesContent":["import { Field, QueryGroup, Rule } from '../query.types';\r\n\r\nexport function translateQueryGroup(queryGroup: QueryGroup, fields: Array<Field>): void {\r\n\r\n  if (queryGroup.rules != null) {\r\n    for (const rule of queryGroup.rules) {\r\n\r\n      if (rule.datas === undefined) {\r\n        rule.datas = [undefined, undefined];\r\n        if (rule.data) {\r\n          rule.datas[0] = rule.data;\r\n        }\r\n      }\r\n\r\n      if (rule.datas) {\r\n        rule['sdatas'] = rule.datas;\r\n      }\r\n\r\n      // if (rule.data) {\r\n      //   rule['sdata'] = rule.data;\r\n      // } else {\r\n      //   rule.data = rule.datas[0]\r\n      // }\r\n\r\n      if (typeof rule.field === 'string') {\r\n        var field: any = fields.find(x => x.name === rule.field);\r\n\r\n        if (field === undefined || field === null) {\r\n          throw new Error(`Can't found out a field by name '${rule.field}'.`);\r\n        }\r\n\r\n        rule.field = field;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (queryGroup.groups && queryGroup.groups !== null) {\r\n    for (const group of queryGroup.groups) {\r\n      translateQueryGroup(group, fields);\r\n    }\r\n  }\r\n}\r\n\r\nexport function cloneQueryGroup(source: QueryGroup): QueryGroup {\r\n  var result: QueryGroup = {\r\n    op: source.op,\r\n    groups: [],\r\n    rules: []\r\n  };\r\n\r\n  if (source.rules && source.rules.length > 0) {\r\n    for (const rule of source.rules) {\r\n      result.rules.push({\r\n        field: rule.field,\r\n        op: rule.op,\r\n        data: rule.data,\r\n        datas: rule.datas ? rule.datas.map(x => x) : undefined\r\n      });\r\n    }\r\n  }\r\n\r\n  if (source.groups && source.groups.length > 0) {\r\n    for (const child of source.groups) {\r\n      result.groups.push(cloneQueryGroup(child));\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function generateQuery(queryGroup: QueryGroup): QueryGroup {\r\n  if (queryGroup === undefined || queryGroup === null) {\r\n    return undefined;\r\n  }\r\n\r\n  var result: QueryGroup = {\r\n    op: queryGroup.op,\r\n    groups: [],\r\n    rules: []\r\n  };\r\n\r\n  if (queryGroup.rules && queryGroup.rules.length > 0) {\r\n    for (const rule of queryGroup.rules) {\r\n      var rule2: Rule = {\r\n        field: rule.field['name'],\r\n        op: rule.op,\r\n        data: undefined,\r\n        datas: undefined\r\n      };\r\n\r\n      if (rule.datas)\r\n        if (rule2.op === 'bt') {\r\n          rule2.datas = rule.datas;\r\n        } else {\r\n          rule2.data = rule.datas[0];\r\n        }\r\n\r\n      result.rules.push(rule2);\r\n    }\r\n  }\r\n\r\n  if (queryGroup.groups && queryGroup.groups.length > 0) {\r\n    for (const child of queryGroup.groups) {\r\n      result.groups.push(generateQuery(child));\r\n    }\r\n  }\r\n\r\n  return result;\r\n}"]}