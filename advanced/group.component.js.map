{"version":3,"sources":["../../src/advanced/group.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAmB,KAAA,EAAO,MAAA,EAAQ,YAAA,EAAa,MAAO,eAAA,CAAgB;AAE/E,OAAO,EAAqB,WAAA,EAAyB,MAAO,gBAAA,CAAiB;AAC7E,OAAO,EAAE,yBAAA,EAA0B,MAAO,mCAAA,CAAoC;AAG9E;IASI,wBAAoB,MAAiC;QAAjC,WAAM,GAAN,MAAM,CAA2B;QANpD,WAAM,GAAiB,EAAE,CAAC;QAC1B,cAAS,GAAY,KAAK,CAAC;QAC3B,WAAM,GAAsB,IAAI,YAAY,EAAE,CAAC;QAK5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;IACzC,CAAC;IAED,iCAAQ,GAAR;QACI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;YACnB,EAAE,EAAE,WAAW,CAAC,GAAG;YACnB,MAAM,EAAE,EAAE;YACV,KAAK,EAAE,EAAE;SACZ,CAAC,CAAC;IACP,CAAC;IAED,gCAAO,GAAP;QACI,IAAI,KAAY,CAAC;QACjB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;YAClB,EAAE,EAAE,IAAI;YACR,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,EAAE;SACZ,CAAC,CAAC;IACP,CAAC;IAED,oCAAW,GAAX;QACI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,wCAAe,GAAf,UAAgB,KAAiB;QAC7B,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,KAAK,EAAX,CAAW,CAAC,CAAC;IACnE,CAAC;IAmDL,qBAAC;AAAD,CA5FA,AA4FC;;AAlDM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,iBAAiB;gBAC3B,QAAQ,EACR,2mDA6BC;gBACD,MAAM,EAAE,CAAC,qEAGP,CAAC;aACN,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,yBAAyB,GAAG;CAClC,EAF6F,CAE7F,CAAC;AACK,6BAAc,GAA2C;IAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC/B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAC5B,CAAC","file":"group.component.js","sourceRoot":"","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { Field, QueryGroup, GroupOpType, GroupOpItem } from '../query.types';\r\nimport { QueryConfigurationService } from '../services/configuration.service';\r\n\r\n\r\nexport class GroupComponent {\r\n\r\n     group: QueryGroup;\r\n     fields: Array<Field> = [];\r\n     canRemove: boolean = false;\r\n     remove: EventEmitter<any> = new EventEmitter();\r\n\r\n    groupOps: Array<GroupOpItem>;\r\n\r\n    constructor(private config: QueryConfigurationService) {\r\n        this.groupOps = this.config.groupOps;\r\n    }\r\n\r\n    addGroup(): void {\r\n        this.group.groups.push({\r\n            op: GroupOpType.AND,\r\n            groups: [],\r\n            rules: []\r\n        });\r\n    }\r\n\r\n    addRule(): void {\r\n        var field: Field;\r\n        if (this.fields.length > 0) {\r\n            field = this.fields[0];\r\n        }\r\n\r\n        this.group.rules.push({\r\n            op: 'eq',\r\n            field: field,\r\n            data: '',\r\n            datas: []\r\n        });\r\n    }\r\n\r\n    removeGroup(): void {\r\n        this.remove.emit(this.group);\r\n    }\r\n\r\n    removeGroupItem(group: QueryGroup): void {\r\n        this.group.groups = this.group.groups.filter(x => x !== group);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'ngx-query-group',\r\n    template:\r\n    `\r\n    <div class=\"col-md-12\">\r\n        <div class=\"form-group\">\r\n            <div class=\"col-md-3\">\r\n                <div class=\"input-group\">\r\n                    <div class=\"input-group-btn\">\r\n                        <button type=\"button\" class=\"btn btn-default\"\r\n                            (click)=\"addGroup()\"><i class=\"glyphicon glyphicon-plus\"></i> {{'{}'}}</button>\r\n                        <button type=\"button\" class=\"btn btn-default\"\r\n                            (click)=\"addRule()\"><i class=\"glyphicon glyphicon-plus\"></i></button>\r\n                        <button type=\"button\" class=\"btn btn-default\" *ngIf=\"canRemove\"\r\n                            (click)=\"removeGroup()\"><i class=\"glyphicon glyphicon-minus\"></i></button>\r\n                    </div>\r\n                    <select class=\"form-control\" [(ngModel)]=\"group.op\">\r\n                        <option *ngFor=\"let item of groupOps\" [ngValue]=\"item.key\">{{item.label}}</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div *ngIf=\"group.groups.length>0\" class=\"col-md-12 ngx-query-group-children\">\r\n        <ngx-query-group *ngFor=\"let group of group.groups\" [group]=\"group\"\r\n            [fields]=\"fields\" [canRemove]=\"true\" (remove)=\"removeGroupItem($event)\">\r\n        </ngx-query-group>\r\n    </div>\r\n    <div *ngIf=\"group.rules.length>0\" class=\"col-md-12 ngx-query-group-children\">\r\n        <ngx-query-rule *ngFor=\"let rule of group.rules\" [group]=\"group\" [rule]=\"rule\" [fields]=\"fields\">\r\n        </ngx-query-rule>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n    .ngx-query-group-children {\r\n        margin-left:20px;\r\n    }`]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: QueryConfigurationService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'group': [{ type: Input },],\n'fields': [{ type: Input },],\n'canRemove': [{ type: Input },],\n'remove': [{ type: Output },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}